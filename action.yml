name: Resolve Vars
description: Coalesce variables or evaluate Jinja2 expression
inputs:
  static_inputs:
    description: >
      Comma-separated list of input variable names to coalesce
    required: false
  jinja_inputs:
    description: >
      Jinja2 expression to evaluate (e.g. user or default_user)
    required: false
  log_outputs:
    description: >
      Whether to log the resolved value (default false). This can be enabled if
      inputs and outputs are non-sensitive. you can also use this for sensitive
      values IIF you are confident you have masked sensitive values using
      GitHub secret masking.
    default: 'false'
    required: false
  non_sensitive:
    description: >
      Alias for log_outputs (true = show evaluated output)
    default: 'false'
    required: false
outputs:
  custom:
    description: 'JSON-encoded object with all resolved custom values'
  var1:
    description: 'Custom user-defined output variable 1'
  var2:
    description: 'Custom user-defined output variable 2'
  var3:
    description: 'Custom user-defined output variable 3'
runs:
  using: "composite"
  steps:
    - id: resolve
      shell: bash
      run: |
        RESULT=""
        declare -A CUSTOM_VARS

        # Coalesce from static_inputs
        if [[ -n "${{ inputs.static_inputs }}" ]]; then
          IFS=',' read -ra VAR_KEYS <<< "${{ inputs.static_inputs }}"
          for key in "${VAR_KEYS[@]}"; do
            val="${{ format('${{{{ inputs.%s }}}}', key | trim) }}"
            if [[ -n "$val" ]]; then
              RESULT="$val"
              break
            fi
          done
        fi

        echo "result=$RESULT" >> "$GITHUB_OUTPUT"
        echo "::set-output name=result::$RESULT"  # legacy for older actions

        # Decide if we should skip Jinja if coalesce worked
        if [[ -z "$RESULT" && -n "${{ inputs.jinja_inputs }}" ]]; then
          echo "Evaluating Jinja expression..."
          echo "${{ inputs.jinja_inputs }}" > expression.j2

          cat <<EOF > context.json
$(jq -n \
  $(for var in $(env | grep '^INPUT_' | sed 's/^INPUT_//' | tr '[:upper:]' '[:lower:]'); do
    echo --arg $var "${!var}"
  done) \
  '{env: $*}')
EOF

          pip install --quiet jinja2-cli
          RESULT=$(jinja2 expression.j2 context.json || true)
          echo "result=$RESULT" >> "$GITHUB_OUTPUT"
        fi

        # Emit custom variables if present
        for i in 1 2 3; do
          key="var$i"
          val="${{ format('${{{{ inputs.%s }}}}', key | trim) }}"
          if [[ -n "$val" ]]; then
            varname="var$i"
            echo "$varname=$val" >> "$GITHUB_OUTPUT"
            CUSTOM_VARS[$varname]="$val"
          fi
        done

        # Emit combined JSON custom object
        json_payload="{"
        for k in "${!CUSTOM_VARS[@]}"; do
          json_payload+="\"$k\":\"${CUSTOM_VARS[$k]}\","
        done
        json_payload=${json_payload%,}  # trim trailing comma
        json_payload+="}"
        echo "custom=$json_payload" >> "$GITHUB_OUTPUT"

        SHOULD_LOG="${{ inputs.log_outputs == 'true' || inputs.non_sensitive == 'true' }}"
        if [[ "$SHOULD_LOG" == "true" ]]; then
          echo "✅ Resolved value: $RESULT"
          {
            echo "### 🔍 Variable Resolution Summary"
            echo "- \`result\`: $RESULT"
            for k in "${!CUSTOM_VARS[@]}"; do
              echo "- \`$k\`: ${CUSTOM_VARS[$k]}"
            done
            echo "- \`custom\`: $json_payload"
          } >> "$GITHUB_STEP_SUMMARY"
        fi
